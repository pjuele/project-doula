generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Deliverable {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  startDate DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Date
  projectId Int
  parent    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  elements  Element[]
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String?       @db.VarChar(255)
  deliverables Deliverable[]
}

// TODO: turn this into a users table. Users that haven't signed-up cannot be assigned tasks (simplify and avoid maintaining both a users table and a team members table)
model TeamMember {
  id               Int       @id @default(autoincrement())
  name             String?   @db.VarChar(255)
  assignedElements Element[]
}

model Element {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(255)
  hours         Int?
  // TODO: Figure userId out. I don't have a user table in prisma/neon. Perhaps that's what sign-up does?
  // userId        Int         @unique
  deliverableId Int
  assignedToId  Int?
  assignedTo    TeamMember?  @relation(fields: [assignedToId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  parent        Deliverable @relation(fields: [deliverableId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
